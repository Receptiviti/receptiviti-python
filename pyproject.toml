[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "receptiviti"
dynamic = ["version"]
description = "Process texts with the Receptiviti API"
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = []
authors = [
  { name = "Micah", email = "micah.iserman@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  'Topic :: Scientific/Engineering'
]
dependencies = [
  "requests",
  "numpy",
  "pandas",
  "tqdm",
  "pyarrow",
]

[project.optional-dependencies]
dev = [
  "types-requests",
  "mkdocs>=1.4.3",
  "mkdocstrings[python]>=0.18",
  "mkdocs-material>=9.1.15",
]

[project.urls]
Documentation = "https://receptiviti.github.io/receptiviti-python"
Issues = "https://github.com/receptiviti/receptiviti-python/issues"
Source = "https://github.com/receptiviti/receptiviti-python"

[tool.hatch.version]
path = "src/receptiviti/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = [
  "coverage run -m pytest {args:tests}",
  " - coverage combine",
  "coverage html -d docs_source/coverage",
]

[tool.hatch.build.targets.sdist]
exclude = [
  "/.venv",
  "/.vscode",
  "/docs",
  "/docs_source",
  "/.env",
  "/.gitignore",
  "/mkdocs.yml",
  "/build.sh",
]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocstrings[python]",
  "mkdocs-material",
  "jupytext",
  "ipykernel",
  "mkdocs-jupyter",
]
[tool.hatch.envs.docs.scripts]
article-setup = "jupytext --set-kernel - docs_source/articles/quick_start.md"
article = "jupytext --to notebook --execute docs_source/articles/quick_start.md"
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000 --clean"

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "pytest",
  "pyarrow-stubs",
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/receptiviti tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 100

[tool.ruff]
target-version = "py37"
line-length = 100
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow base import names
  "ICN001",
  # Allow defaults
  "B008", "FBT001", "FBT002",
  # Allow constants
  "PLR2004",
  # Allow print
  "T201",
  # Allow loop overwrite
  "PLW2901",
  # Allow MD5s
  "S324",
  # Allow pickle
  "S301"
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
exclude = ["src/receptiviti/__init__.py"]

[tool.ruff.isort]
known-first-party = ["receptiviti"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["receptiviti", "tests"]
parallel = true
omit = [
  "*/__about__.py",
  "*/__init__.py",
]
relative_files = true

[tool.coverage.paths]
receptiviti = ["src/receptiviti", "*/receptiviti"]
tests = ["tests", "*/receptiviti-python/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
